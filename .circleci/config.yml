version: 2.1 # use CircleCI 2.0

orbs:
  jira: circleci/jira@1.0.5

jobs: # A basic unit of work in a run
  build: # runs not using Workflows must have a `build` job as entry point 
    # directory where steps are run
    working_directory: ~/circleci-HafrenHaver
    docker: # run the steps with Docker
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:latest
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
      - image: circleci/postgres:9.6.2
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
        environment: # environment variables for the Postgres container.
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.9/site-packages
      - restore_cache:
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: Setting Up Project Environment
          command: |
            sudo python3 -m pip install --upgrade pip
            sudo python3 -m pip install --upgrade pipenv
            pipenv install
      - save_cache: # cache Python dependencies using checksum of Pipfile as the cache-key
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - "venv"
      - run:
          name: Running Tests
          command: |
            find src/ -iname 'test_*.py' -exec pipenv run python '{}' \;
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: test-results
          destination: tr1
      - run:
          name: Generating Distribution Archive
          command: |
            python3 -m pip install --user --upgrade setuptools wheel
            python3 setup.py sdist bdist_wheel
      # TODO how to sign artifacts and upload siggy
      - run:
          name: Uploading Distribution Archive Testing
          command: |
            python3 -m pip install --user --upgrade twine
            echo '[testpypi]'                   >  ~/.pypirc
            echo 'username = __token__'         >> ~/.pypirc
            echo "password = $TESTPYPI_API_KEY" >> ~/.pypirc
            cat ~/.pypirc
            python3 -m twine upload --repository testpypi --verbose dist/*
      - run:
          name: Installing Newly Uploaded Package
          command: |
            #python3 -m pip install --user --upgrade pip
            #python3 -m pip install --user --upgrade --index-url https://test.pypi.org/simple/ --no-deps HafrenHaver-InnovAnon-Inc
            python3 -m pip install --user --upgrade --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple HafrenHaver
      # TODO deploy servers (testing)
      # TODO integration test
      - run:
          name: Uploading Distribution Archive Production
          command: |
            python3 -m pip install --user --upgrade twine
            echo '[pypi]'                   >  ~/.pypirc
            echo 'username = __token__'     >> ~/.pypirc
            echo "password = $PYPI_API_KEY" >> ~/.pypirc
            cat ~/.pypirc
            python3 -m twine upload --repository pypi --verbose dist/*
      # TODO deploy servers (prod)
      # TODO deploy docs
